PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            image_path TEXT,
            keywords TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
INSERT INTO entries VALUES(3,'Test','Testing','static/uploads/rabbit.jpg','test, testing, tested','2025-09-17 19:58:14');
INSERT INTO entries VALUES(4,'Git commands',replace(replace('Goal Command\r\nRestore tracked files to last commit git reset --hard\r\nRemove untracked files too git clean -fd\r\nRevert to a specific commit git reset --hard\r\nUndo changes but keep untracked files git checkout -- \r\n\r\ngit reset --hard\r\ngit clean --fd\r\n(reset to last git commit)','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:18:04');
INSERT INTO entries VALUES(5,'Python environment workflow example',replace(replace('4■■ Workflow example\r\n# 1. Create a venv\r\npython3 -m venv venv\r\n# 2. Activate it\r\nsource venv/bin/activate\r\n# 3. Install dependencies\r\npip install requests beautifulsoup4 lxml html5lib\r\n# 4. Run your script\r\npython scrape_evboard.py\r\nWhen you’re done, deactivate:\r\ndeactivate','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:18:37');
INSERT INTO entries VALUES(6,'Python notes',replace(replace('Pip3 installs libraries (adding like pandas)\r\nPython3 executes code','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:19:26');
INSERT INTO entries VALUES(7,'Step up folder in git',replace(replace('1. Create a folder for your new novel\r\nOpen Terminal and run:\r\ncd ~/Documents # or wherever you want your novel folder\r\nmkdir "Gothic"\r\ncd "Gothic"\r\n* mkdir creates the folder\r\n* cd moves into the folder\r\n2. Initialize a new Git repository\r\ngit init\r\n* This creates a hidden .git folder, which will track all your changes for this novel.\r\n3. Create your first file\r\n* For example, start with a main manuscript file:\r\ntouch chapter1.md\r\n* .md = Markdown (plain text) is better for Git because changes are tracked line by line.\r\n* You can also use .txt or .docx, but Git handles text better.\r\n4. Stage and commit your first file\r\ngit add chapter1.md\r\ngit commit -m "Initial commit for Gothic"\r\n* This creates your first snapshot of the project locally.\r\n5. Create a GitHub repository\r\n1. Go to GitHub → New repository\r\n2. Name it something like Gothic\r\n3. Don’t initialize with a README (you already have your local folder)\r\n4. Click Create repository\r\n6. Link your local folder to GitHub\r\nCopy the HTTPS URL from GitHub, then run:\r\ngit remote add origin https://github.com//Gothic.git\r\ngit branch -M main\r\ngit push -u origin main\r\n* remote add origin → links your local repo to GitHub\r\n* branch -M main → ensures your main branch is c','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:20:26');
INSERT INTO entries VALUES(8,'Terminal commands',replace(replace('Fast fetch - system info\r\nBrew leaves - show packages I installed\r\nCd to change directory - drag and drop the folder into terminal\r\nCd ~ is home folder\r\nOpen . To open current folder\r\nmkdir new_project - create new folder - add -p to create nest folders\r\nPwd to check where you are - print working director\r\nLs list folders and files where you are\r\nBrew search [name] search for a package\r\nBrew install [name] install package\r\nBrew list - list all installed packages\r\nBrew list —cask - show all apps installed\r\nBrew update - update brew\r\nBrew upgrade - upgrade all installed packages and casks\r\nBrew cleanup - remove old versions\r\nBrew uninstall\r\nWget download files from the web\r\nMirror/download a whole website: wget -m -p -E -k -np https://example.com\r\nSpeediest-cli - internet speed test\r\necho "hello world" > test.txt - create a file in cd\r\nRg search in files\r\nYt-dlp -x —audio-format m4a “YouTube link” download audio from video\r\n~ = home\r\nNcdu - shows disk usage - press to delete files\r\nnano ~/.zshrc - open shell config (add or delete alias)\r\n&& combine commands\r\nUse tab for autocomplete\r\nRsync - keep folders/files synced - save the script using nano, make it executable with chmod +x -\r\nrun the script - use .command\r\nMagick input.png output.jpeg - convert images\r\nMv - rename folder\r\nDu -sh ~/ - show how much disk space is being used\r\nHistory - show previous commands used\r\ncp file.txt ~/Documents/ - copy file\r\nOpen - open files, apps urls from terminal - use -a for app - https:// for urls\r\nmdfind "report.pdf" - search spotlight from terminal - use open to open file path - use “” if spaces\r\nNano - Save: Ctrl + O → Enter Exit: Ctrl + X\r\nOnly use bin bash in nano','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:20:57');
INSERT INTO entries VALUES(9,'Managing your novel in GitHub',replace(replace('Github novel\r\ncd /path/to/your/novel # go to your project folder\r\ngit status # optional: see what changed\r\ngit add chapter1.docx # stage your edits\r\ngit commit -m "Edited Chapter 1: improved dialogue"\r\ngit push # upload to GitHub\r\n1. Stage and commit locally\r\n* You can commit your work as many times as you like on your computer without touching GitHub.\r\n* Example workflow while working on Chapter One:\r\n# Stage your edits\r\ngit add chapter1.docx\r\n# Commit your progress\r\ngit commit -m "Improved dialogue in Chapter 1"\r\n* This creates a local snapshot of your manuscript.\r\n* You can keep repeating this as you make edits: stage, commit, stage, commit…\r\n2. Continue writing\r\n* After committing, you can keep editing your files.\r\n* Git keeps track of what’s changed since the last commit.\r\n3. Push when ready\r\n* Once you feel like you’ve reached a milestone (e.g., finished a chapter, or completed a day’s\r\nwriting), push all your commits to GitHub:\r\ngit push\r\n* All the commits you made locally will now be backed up online.\r\n4. Benefits of this approach\r\n* Frequent commits: Let you track every small change and write notes in commit messages.\r\n* Flexible push: You decide when your work goes to the cloud; you’re not forced to upload partial\r\ndrafts.\r\n* Safe experimentation: You can create branches to test alternate plotlines without affecting your\r\nmain manuscript.\r\n5. Analogy\r\n* Commit = saving a local draft with a note.\r\n* Push = uploading your drafts to the cloud (GitHub).\r\n* You can save as many drafts as you want before sending them online.','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:21:31');
INSERT INTO entries VALUES(10,'Notes',replace(replace('Ah! That error tells us that your script needs the requests library, but it’s not installed in your Python\r\nenvironment. Here’s how to fix it:\r\n1. Install the requests module\r\nRun this in your terminal:\r\npython3 -m pip install requests\r\nUsing python3 -m pip ensures you’re installing it for the exact Python version you’re running the\r\nscript with.\r\n2. Verify installation\r\npython3 -m pip show requests\r\nYou should see details about the package if it’s installed correctly.\r\n3. Run your script again\r\npython3 scrape_evboard.py\r\n■ Tip: If you plan to use more Python packages, it’s a good idea to use a virtual environment so\r\nyour project dependencies are isolated. For example:\r\npython3 -m venv venv\r\nsource venv/bin/activate # Mac/Linux\r\npip install requests\r\npython3 scrape_evboard.py\r\nIf you want, I can give you a one-liner that sets up a virtual environment and installs all needed\r\npackages so you never hit ModuleNotFoundError again. Do you want me to do that?\r\nYou said:\r\ndo.i have to install the requests module ererytime - why?\r\nChatGPT said:\r\nNo, you don’t have to install requests every time—once it’s installed for the Python environment\r\nyou’re using, it stays installed.\r\nThe reason you saw the error is usually one of these:\r\n1■■ Different Python environments\r\nOn your Mac, you might have multiple Python versions:\r\npython3 (system Python)\r\nPython installed via Homebrew\r\nPython installed via Anaconda or another package manager\r\nEach environment has its own set of installed packages. Installing requests in one environment\r\ndoesn’t make it available in another.\r\n2■■ Using a virtual environment\r\nIf you run your script inside a virtual environment (venv), it starts “clean” with no extra packages.\r\nYou need to install requests once per virtual environment, not every time you run Python\r\nsystem-wide.\r\n■ How to avoid reinstalling repeatedly\r\nInstall requests in the main Python environment:\r\npython3 -m pip install requests\r\nOr, create a virtual environment and install dependencies once:\r\npython3 -m venv venv # create env\r\nsource venv/bin/activate # activate env\r\npip install requests # install packages\r\npython scrape_evboard.py # run script\r\nAfter that, just activate the virtual environment each time:\r\nsource venv/bin/activate\r\npython scrape_evboard.py\r\nIf you want, I can show a way to make sure you never have to install requests again, even if you\r\nswitch folders or reopen the terminal. Do you want me to do that?\r\nYou said:\r\n(venv) shaunallsopp@Shauns-MacBook-Air python scripts % python scrape_evboard.py\r\nTraceback (most recent call last):\r\nFile "/Users/shaunallsopp/python scripts/scrape_evboard.py", line 2, in\r\nfrom bs4 import BeautifulSoup\r\nModuleNotFoundError: No module named ''bs4''\r\n(venv) shaunallsopp@Shauns-MacBook-Air python scripts %\r\nChatGPT said:\r\nAh, now it’s a similar issue but with BeautifulSoup. The module bs4 (which provides BeautifulSoup)\r\nisn’t installed in your virtual environment yet.\r\nSince you’re in a virtual environment ((venv) shows that), you just need to install it once for this\r\nenvironment:\r\n1■■ Install BeautifulSoup\r\npip install beautifulsoup4\r\n2■■ (Optional) If your script also uses lxml or html5lib as parsers\r\nBeautifulSoup can use different parsers. The default is Python’s built-in parser, but for faster or\r\nmore robust parsing, you may want:\r\npip install lxml html5lib\r\n3■■ Run your script again\r\npython scrape_evboard.py\r\n■ Tip: Once you’ve installed all your project dependencies, you can save them to a file so you\r\nnever have to install them manually again:\r\npip freeze > requirements.txt\r\nThen in the future, in a new environment:\r\npip install -r requirements.txt\r\nThis automatically installs all needed packages.\r\nIf you want, I can write a single command that installs requests, beautifulsoup4, and any other\r\ncommon scraping packages for you so your virtual environment is ready to go. Do you want me to\r\ndo that?\r\nYou said:\r\nok\r\nChatGPT said:\r\nPerfect! Since you’re setting up a Python environment for web scraping, here’s a single command\r\nto install the most commonly needed packages in your virtual environment:\r\npip install requests beautifulsoup4 lxml html5lib\r\nHere’s what each package does:\r\nrequests → for making HTTP requests\r\nbeautifulsoup4 (bs4) → for parsing HTML\r\nlxml → fast HTML/XML parser for BeautifulSoup\r\nhtml5lib → alternative parser for more complex HTML\r\nOptional step: save all dependencies\r\nAfter installing, save them so you can reinstall easily later:\r\npip freeze > requirements.txt\r\nLater, in any new environment:\r\npip install -r requirements.txt','\r',char(13)),'\n',char(10)),NULL,'','2025-09-18 09:22:05');
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('entries',10);
COMMIT;
